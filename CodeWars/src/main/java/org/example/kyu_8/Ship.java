package org.example.kyu_8;

/*
Привет, приятель!
Вы лидер небольшой пиратской команды. И у вас есть план. С помощью ООП вы хотите создать довольно эффективную систему
для идентификации кораблей с тяжелой добычей на борту!
К сожалению для вас, в наши дни люди много весят, так как же вы узнаете, что корабль полон золота, а не людей?
Вы начинаете с написания универсального класса / структуры Ship:
Каждый раз, когда ваши шпионы видят, как новый корабль входит в док, они будут создавать новый объект ship на основе своих наблюдений:

осадка - оценка веса судна, основанная на том, насколько низко оно находится в воде.
экипаж - количество членов экипажа на борту
Ship titanic = new Ship(15, 10);
Задача
У вас есть доступ к разделам корабля "осадка" и "экипаж". "Осадка" - это общий вес судна,
а "экипаж" - количество людей на судне.

Каждый член экипажа добавляет 1.5 единиц к осадке корабля. Если после уменьшения веса экипажа осадка все еще больше,
чем 20, то корабль стоит разграбить. На любом корабле такого веса должно быть много добычи!

Добавьте метод

isWorthIt
чтобы решить, достоин ли корабль добычи. Например:

titanic.isWorthIt() == false
Удачи и желаю вам найти GOOOLD!
 */
public class Ship {
    public static void main(String[] args) {
        Ship ship = new Ship(40, 5);
        System.out.println(ship.isWorthIt());
    }

    private final double draft;
    private final int crew;

    public Ship(double draft, int crew) {
        this.draft = draft;
        this.crew = crew;
    }

    public boolean isWorthIt() {
        return draft - crew * 1.5 > 20;
    }
}
